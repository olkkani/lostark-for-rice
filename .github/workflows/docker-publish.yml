name: CI/CD Pipeline
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  IMAGE_NAME: "ghcr.io/${{ github.repository }}"
  WORK_DIR: "/home/${{ secrets.USERNAME }}/lfr/back"
  NGINX_DIR: "/home/${{ secrets.USERNAME }}/lfr/nginx"
jobs:
  get-short-sha:
    runs-on: ubuntu-latest
    outputs:
      short_sha: ${{ steps.set-sha.outputs.short_sha }}
    steps:
      - uses: actions/checkout@v4
      - name: Get short SHA
        id: set-sha
        run: echo "short_sha=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
  build:
    runs-on: ubuntu-24.04
    needs: get-short-sha
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: setup jdk21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Cache Gradle dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Check disk usage
        run: df -h

      - name: Build with Gradle
        run: ./gradlew build

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.OLKK_GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ env.IMAGE_NAME }}:${{ needs.get-short-sha.outputs.short_sha }}

  serve-file:
    runs-on: ubuntu-24.04
    needs: build
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Copy upstream conf files
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.PORT }}
          source: "./.github/nginx-config/upstream/"
          target: "${{ env.WORK_DIR }}"
          overwrite: true
          rm: true
          strip_components: 3

      - name: Copy docker-compose.yml to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.PORT }}
          source: "./.github/docker-compose.yml"
          target: "${{ env.WORK_DIR}}"
          overwrite: true
          strip_components: 2

      - name: serve-env
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.PORT }}
          script: |
            cd ${{ env.WORK_DIR }}
            
            echo "DB_CONNECTION_URL=${{ secrets.DB_CONNECTION_URL }}" >> .env
            echo "DB_USER=${{ secrets.DB_USER }}" >> .env
            echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
            echo "AUCTION_API_KEY=${{ secrets.AUCTION_API_KEY }}" >> .env 
            echo "MARKET_API_KEY=${{ secrets.MARKET_API_KEY }}" >> .env 
            echo "DISCORD_WEBHOOK_URL=${{ secrets.DISCORD_WEBHOOK_URL }}" >> .env
            echo "IMAGE_NAME=${{ env.IMAGE_NAME }}:${{ needs.get-short-sha.outputs.short_sha }}" >> .env
  deploy:
    runs-on: ubuntu-24.04
    needs: serve-file
    env:
      HOST: ${{ secrets.HOST }}
      PORT_BLUE: ${{ secrets.PORT_BLUE }}
      PORT_GREEN: ${{ secrets.PORT_GREEN }}

    steps:
      - name: Deploy
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.PORT }}
          script: |
            COMPSE_PATH="${{ env.WORK_DIR }}/docker-compose.yml"
            mkdir -p ${{ env.NGINX_DIR }}
            # 실행 중인 서비스 확인
            ACTIVE_SERVICE=$(docker ps --format "{{.Names}}" | grep -E "lfr-backend-blue|lfr-backend-green" | head -n1)
            if [ "$ACTIVE_SERVICE" = "lfr-backend-blue" ]; then
              NEW_SERVICE="green"
              OLD_SERVICE="blue"
              mv "${{ env.WORK_DIR }}/upstream/green.conf" "${{ env.NGINX_DIR }}/back-active-upstream.conf"
            else
              NEW_SERVICE="blue"
              OLD_SERVICE="green"
              mv "${{ env.WORK_DIR }}/upstream/blue.conf" "${{ env.NGINX_DIR }}/back-active-upstream.conf"
            fi
            
            # 기존 서비스 종료
            docker compose -f "$COMPSE_PATH" stop "$OLD_SERVICE"
            docker compose -f "$COMPSE_PATH" rm -f "$OLD_SERVICE"
            
            # 새 서비스 실행
            docker compose -f "$COMPSE_PATH" pull "$NEW_SERVICE"
            docker compose -f "$COMPSE_PATH" up -d "$NEW_SERVICE"
            
            # health check, Todo
            sleep 15 
            
            # reload nginx config
            docker exec -it nginx nginx -s reload
            
            # 사용하지 않는 이미지 삭제
            docker image prune -f